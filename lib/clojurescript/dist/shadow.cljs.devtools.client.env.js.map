{"version":3,"file":"shadow.cljs.devtools.client.env.js","sources":["shadow/cljs/devtools/client/env.cljs"],"mappings":"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","names":["shadow.cljs.devtools.client.env/client-id","cljs.core/random-uuid","goog/define","shadow.cljs.devtools.client.env/get-repl-host","and__3911__auto__","shadow.cljs.devtools.client.env/use-document-host","js/goog.global.document","js/document.location.hostname","shadow.cljs.devtools.client.env/repl-host","shadow.cljs.devtools.client.env/get-url-base","cljs.core/seq","shadow.cljs.devtools.client.env/devtools-url","shadow.cljs.devtools.client.env/ssl","shadow.cljs.devtools.client.env/repl-port","shadow.cljs.devtools.client.env/get-ws-url-base","clojure.string/replace","js/Error","shadow.cljs.devtools.client.env/ws-url","client-type","cljs.core/Keyword","shadow.cljs.devtools.client.env/build-id","shadow.cljs.devtools.client.env/proc-id","cljs.core/name","shadow.cljs.devtools.client.env/ws-listener-url","shadow.cljs.devtools.client.env/files-url","shadow.cljs.devtools.client.env/repl-print-fn","cljs.core/pr-str","shadow.cljs.devtools.client.env/repl-error","e","G__27000","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","shadow.cljs.devtools.client.env/repl-call","repl-expr","repl-error","e27001","result","ret","cljs.core/*3","cljs.core/*2","cljs.core/*1","e27002","js/console.log","cljs.core/*e","shadow.cljs.devtools.client.env/process-ws-msg","handler","*default-data-reader-fn*27003","cljs.tools.reader/*default-data-reader-fn*","tag","value","text","msg","e27004","cljs.tools.reader.read_string.cljs$core$IFn$_invoke$arity$1","js/console.warn","p__27005","p__27006","map__27007","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__27008","shadow.cljs.devtools.client.env/make-task-fn","log-missing-fn","log-call-async","log-call","fn-sym","fn-str","async","next","fn-obj","js/goog.getObjectByName","js/$CLJS","p__27027","vec__27028","seq__27029","first__27030","cljs.core/first","cljs.core/next","shadow.cljs.devtools.client.env/do-js-reload*","task","remaining-tasks","G__27031","var_args","G__27035","shadow.cljs.devtools.client.env/do-js-reload","p__27036","map__27037","load-code-fn","shadow.cljs.devtools.client.env.do_js_reload.cljs$core$IFn$_invoke$arity$3","reload-info","complete-fn","load-tasks","cljs.core.into.cljs$core$IFn$_invoke$arity$2","p1__27032#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/reverse","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.into.cljs$core$IFn$_invoke$arity$3","p1__27033#","cljs.core.map.cljs$core$IFn$_invoke$arity$1"],"sourcesContent":["(ns shadow.cljs.devtools.client.env\n  (:require [goog.object :as gobj]\n            [cljs.tools.reader :as reader]\n            [clojure.string :as str]))\n\n(defonce client-id (random-uuid))\n\n(goog-define enabled false)\n\n(goog-define autoload true)\n\n(goog-define module-format \"goog\")\n\n(goog-define reload-with-state false)\n\n(goog-define build-id \"\")\n\n(goog-define proc-id \"\")\n\n(goog-define repl-host \"\")\n\n(goog-define repl-port 8200)\n\n(goog-define use-document-host true)\n\n(goog-define devtools-url \"\")\n\n(goog-define ssl false)\n\n(defn get-repl-host []\n  (if (and use-document-host js/goog.global.document)\n    js/document.location.hostname\n    repl-host))\n\n(defn get-url-base []\n  (if (seq devtools-url)\n    devtools-url\n    (str \"http\" (when ssl \"s\") \"://\" (get-repl-host) \":\" repl-port)))\n\n(defn get-ws-url-base []\n  (-> (get-url-base)\n      (str/replace #\"^http\" \"ws\")))\n\n(defn ws-url [client-type]\n  {:pre [(keyword? client-type)]}\n  (str (get-ws-url-base) \"/ws/worker/\" build-id \"/\" proc-id \"/\" client-id \"/\" (name client-type)))\n\n(defn ws-listener-url [client-type]\n  (str (get-ws-url-base) \"/ws/listener/\" build-id \"/\" proc-id \"/\" client-id))\n\n(defn files-url []\n  (str (get-url-base) \"/worker/files/\" build-id \"/\" proc-id \"/\" client-id))\n\n(def repl-print-fn pr-str)\n\n(defn repl-error [e]\n  (-> {:type :repl/invoke-error\n       ;; FIXME: may contain non-printable things and would break the client read\n       ;; :ex-data (ex-data e)\n       :error (.-message e)}\n      (cond->\n        (.hasOwnProperty e \"stack\")\n        (assoc :stack (.-stack e)))))\n\n(defn repl-call [repl-expr repl-error]\n  (try\n    (let [result {:type :repl/result}\n          ret (repl-expr)]\n      (set! *3 *2)\n      (set! *2 *1)\n      (set! *1 ret)\n\n      (try\n\n        (assoc result\n          :value (repl-print-fn ret))\n        (catch :default e\n          (js/console.log \"encoding of result failed\" e ret)\n          (assoc result :error \"ENCODING FAILED\"))))\n    (catch :default e\n      (set! *e e)\n      (repl-error e)\n      )))\n\n(defn process-ws-msg [e handler]\n  (binding [reader/*default-data-reader-fn*\n            (fn [tag value]\n              [:tagged-literal tag value])]\n    (let [text\n          (.-data e)\n\n          msg\n          (try\n            (reader/read-string text)\n            (catch :default e\n              (js/console.warn \"failed to parse websocket message\" text e)))]\n      (when msg\n        (handler msg))\n      )))\n\n(defn make-task-fn [{:keys [log-missing-fn log-call-async log-call]} {:keys [fn-sym fn-str async]}]\n  (fn [next]\n    (let [fn-obj (js/goog.getObjectByName fn-str js/$CLJS)]\n      (cond\n        (nil? fn-obj)\n        (do (when log-missing-fn\n              (log-missing-fn fn-sym))\n            (next))\n\n        async\n        (do (when log-call-async\n              (log-call-async fn-sym))\n            (fn-obj next))\n\n        :else\n        (do (when log-call\n              (log-call fn-sym))\n            (fn-obj)\n            (next))))))\n\n(defn do-js-reload* [[task & remaining-tasks]]\n  (when task\n    (task #(do-js-reload* remaining-tasks))))\n\n(defn do-js-reload\n  \"should pass the :build-complete message and an additional callback\n   which performs the actual loading of the code (sync)\n   will call all before/after callbacks in order\"\n  ([msg load-code-fn]\n    (do-js-reload msg load-code-fn (fn [])))\n  ([{:keys [reload-info] :as msg} load-code-fn complete-fn]\n   (let [load-tasks\n         (-> []\n             ;; unload is FILO\n             (into (->> (:before-load reload-info)\n                        (map #(make-task-fn msg %))\n                        (reverse)))\n             (conj (fn [next]\n                     (load-code-fn)\n                     (next)))\n             ;; load is FIFO\n             (into (map #(make-task-fn msg %)) (:after-load reload-info))\n             (conj (fn [next]\n                     (complete-fn)\n                     (next))))]\n\n     (do-js-reload* load-tasks))))\n"]}